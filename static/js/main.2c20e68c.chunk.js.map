{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Screen","firstNum","secondNum","operator","display","className","NumKeypad","key","index","numKey","numPress","onClick","OpKeypad","op","opPress","App","useState","setFirstNum","setSecondNum","setOperator","numKeys","opKeys","newNum","console","log","prevOp","map","opKey","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2c20e68c.chunk.js","sourcesContent":["import React, { useState } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\n// display doesn't need to be state as we can compute it\nfunction Screen({ firstNum, secondNum, operator }){\n  let display = 0;\n  switch(operator){\n    case \"+\":\n      display = firstNum + secondNum;\n      break;\n    case \"-\":\n      display = firstNum - secondNum;\n      break;\n    case \"*\":\n      display = firstNum * secondNum;\n      break; \n    case \"/\":\n      display = firstNum / secondNum;\n      break;\n  }\n\n  return (\n  <div className=\"screen\">\n    \n      <p><span className=\"screenItem\">{firstNum}</span> \n      <span className=\"screenItem\">{(operator !== 0 && operator !== \"=\") ? operator : \" \"}</span>  \n      <span className=\"screenItem\">{secondNum !== 0 ? secondNum : \"\"}</span> \n      </p>\n\n      <strong>{display}</strong>\n    \n    \n  </div>\n    \n  )\n  \n}\n\nfunction NumKeypad({ key, index, numKey, numPress }) {\n\n  return (\n    <button className=\"numKey keys\" onClick={() => numPress(index)}>{numKey}</button>\n\n  )\n}\n\nfunction OpKeypad({ index, op, opPress }) {\n  const key = (op === \"=\" ? \"equalsKey\" : op === \"CE\" ? \"ceKey\" : \"opKeys\") ;\n\n\n  return (\n    <button className={`keys ${key}`} onClick={() => opPress(index)}>{op}</button>\n  );\n}\n\nfunction App() {\n  const [firstNum, setFirstNum] = useState(0);\n  const [secondNum, setSecondNum] = useState(0);\n  const [operator, setOperator] = useState(0);\n\n\n  const numKeys = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const opKeys = [\"=\",  \"+\", \"-\", \"*\", \"/\", \"CE\"];\n\n\n  \n  const numPress = index => {\n    let newNum = 0;\n    let x = 0;\n    \n\n    // If no op has been pressed, set firstNum, else set secondNum\n    {operator === 0 ?\n      newNum = firstNum : newNum = secondNum;\n    }\n    // Allow for multiple digits\n      newNum = newNum * 10;\n      newNum = newNum + numKeys[index];\n\n    // Update states\n    {operator === 0 ?\n      setFirstNum(newNum) : \n      setSecondNum(newNum);\n    }\n\n    // Set answer\n      console.log(firstNum);\n  };\n\n  const opPress = index => {\n    let prevOp = operator;\n    setOperator(opKeys[index]);\n\n    if (opKeys[index] === \"CE\"){\n      setFirstNum(0);\n      setSecondNum(0);\n      setOperator(0);\n      \n      return;\n    }\n\n    if (opKeys[index] === \"=\"){\n\n      let newNum = 0;\n\n      switch(prevOp){\n        case \"+\":\n          newNum = firstNum + secondNum;\n          break;\n        case \"-\":\n          newNum = firstNum - secondNum;\n          break;\n        case \"*\":\n          newNum = firstNum * secondNum;\n          break; \n        case \"/\":\n          newNum = firstNum / secondNum;\n          break;\n      }\n\n      setFirstNum(newNum);\n      setSecondNum(0);\n    }\n\n   // console.log({operator});\n/*\n    \n    if (operator === \"=\"){\n      console.log(\"= pressed\");\n      let newNum = firstNum + secondNum;\n      setDisplay(newNum);\n      setFirstNum(newNum);\n    \n    }\n\n    if (operator === \"+\"){\n      console.log(\"+\");\n      let newNum = firstNum;\n      setFirstNum(newNum);\n      setSecondNum(0);\n\n      setDisplay(\"+\");\n    }*/\n  };\n\n  return (\n    <div className=\"App\">\n      <div>\n        <Screen \n        firstNum={firstNum}\n        secondNum={secondNum}\n        operator={operator}\n      />\n      </div>\n\n      <div className=\"keyboard\">\n\n        <div className=\"numPad\">\n          {numKeys.map((numKey, index) => (\n          <NumKeypad \n          key={index}\n          index={index}\n          numKey={numKey}\n          numPress={numPress}\n          />\n          ))}\n        </div>\n\n        <div className=\"opPad\">\n           {opKeys.map((opKey, index) => (\n          <OpKeypad\n            index={index} \n            op={opKey}\n            opPress={opPress}\n          />\n        ))}\n        </div>\n      </div>\n      \n      \n\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}